package {{.Name}}

import (
	"database/sql"
	"net/http"
	"strconv"

	"github.com/labstack/echo"

    "github.com/alexyslozada/config-go"
	log "github.com/alexyslozada/logger-go"
    message "github.com/alexyslozada/message-go"
)

// Handler estructura que tiene los handler de {{.Name}}
type Handler struct {
    Configuration *config.Configuration
    DB            *sql.DB
    Logger        *log.Model
}

// NewHandler devuelve un puntero a Handler.
func NewHandler(c *config.Configuration, db *sql.DB, l *log.Model) *Handler {
    return &Handler{c, db, l}
}

// Create handler para crear un registro de {{.Name}}
func (h *Handler) Create(c echo.Context) error {
	mr := message.ResponseMessage{}
	m := &Model{}

	err := c.Bind(m)
	if err != nil {
        h.Logger.Warning.Printf("la estructura {{.Name}} no es correcta. Handler Create: %v", err)
		mr.AddError(http.StatusBadRequest, "la estructura del objeto no es correcta", "revise la documentación del paquete")
        return c.JSON(http.StatusBadRequest, mr)
	}

	ms := NewStore(h.Configuration, h.DB)
	err = ms.Create(m)
	if err != nil {
		h.Logger.Error.Printf("no se pudo registrar el modelo {{.Name}}. Handler Create: %v", err)
        mr.AddError(http.StatusInternalServerError, "no fue posible crear el registro", "revise los log del servidor para más información")
		return c.JSON(http.StatusInternalServerError, mr)
	}

	mr.AddMessage(http.StatusCreated, "registro creado", "")
    mr.Data = m
    return c.JSON(http.StatusCreated, mr)
}

// Update handler para actualizar un registro de {{.Name}}
func (h *Handler) Update(c echo.Context) error {
	mr := message.ResponseMessage{}
	m := &Model{}

	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		h.Logger.Warning.Printf("el id debe ser numérico. Handler {{.Name}} Update: %v", err)
		mr.AddError(http.StatusBadRequest, "el id debe ser un número entero", "envíe un número entero")
		return c.JSON(http.StatusBadRequest, mr)
	}

	err = c.Bind(m)
	if err != nil {
		h.Logger.Warning.Printf("la estructura {{.Name}} no es correcta. Handler Update: %v", err)
		mr.AddError(http.StatusBadRequest, "la estructura enviada no es correcta", "revise la documentación")
		return c.JSON(http.StatusBadRequest, mr)
	}

    ms := NewStore(h.Configuration, h.DB)
	m.ID = uint(id)
	err = ms.Update(m.ID, m)
	if err != nil {
		h.Logger.Error.Printf("error al actualizar {{.Name}}. Handler Update: %v", err)
		mr.AddError(http.StatusInternalServerError, "no se pudo actualizar el registro", "revise los logs del servidor")
		return c.JSON(http.StatusInternalServerError, mr)
	}

	mr.AddMessage(http.StatusOK, "registro actualizado", "")
	mr.Data = m
	return c.JSON(http.StatusOK, mr)
}

// Delete handler para eliminar un registro de {{.Name}}
func (h *Handler) Delete(c echo.Context) error {
	mr := message.ResponseMessage{}

	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		h.Logger.Warning.Printf("el id debe ser numérico. Handler {{.Name}} Delete: %v", err)
		mr.AddError(http.StatusBadRequest, "el id debe ser un número entero", "envíe un número entero")
		return c.JSON(http.StatusBadRequest, mr)
	}

    ms := NewStore(h.Configuration, h.DB)
	err = ms.Delete(uint(id))
	if err != nil {
		h.Logger.Error.Printf("error al borrar {{.Name}}: %d. Handler Delete: %v", id, err)
		mr.AddError(http.StatusInternalServerError, "no se pudo eliminar el registro", "revise los log del servidor")
		return c.JSON(http.StatusInternalServerError, mr)
	}

	mr.AddMessage(http.StatusOK, "registro eliminado", "")
	return c.JSON(http.StatusOK, mr)
}

// GetByID handler para obtener un registro de {{.Name}}
func (h *Handler) GetByID(c echo.Context) error {
	mr := message.ResponseMessage{}

	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		h.Logger.Warning.Printf("el id debe ser numérico. Handler {{.Name}} GetByID: %v", err)
		mr.AddError(http.StatusBadRequest, "el id debe ser un número entero", "envíe un número entero")
		return c.JSON(http.StatusBadRequest, mr)
	}

    ms := NewStore(h.Configuration, h.DB)
	res, err := ms.GetByID(uint(id))
	if err == sql.ErrNoRows {
		mr.AddMessage(http.StatusNoContent, "no existen datos", "")
		return c.JSON(http.StatusOK, mr)
	}
	if err != nil {
		h.Logger.Error.Printf("no se pudo obtener los datos solicitados {{.Name}}: %d. Handler GetByID: %v", id, err)
		mr.AddError(http.StatusInternalServerError, "no se pudo consultar la información", "revise los log del servidor")
		return c.JSON(http.StatusInternalServerError, mr)
	}

	mr.AddMessage(http.StatusOK, "Ok", "")
	mr.Data = res
	return c.JSON(http.StatusOK, mr)
}

// GetAll handler para obtener todos los registro de {{.Name}}
func (h *Handler) GetAll(c echo.Context) error {
	mr := message.ResponseMessage{}

    ms := NewStore(h.Configuration, h.DB)
	res, err := ms.GetAll()
	if err != nil {
		h.Logger.Error.Printf("no se pudo obtener la información de {{.Name}}. Handler GetAll: %v", err)
		mr.AddError(http.StatusInternalServerError, "no se pudo consultar la información", "revise los log del servidor")
		return c.JSON(http.StatusInternalServerError, mr)
	}

	mr.AddMessage(http.StatusOK, "Ok", "")
	mr.Data = res
	return c.JSON(http.StatusOK, mr)
}
